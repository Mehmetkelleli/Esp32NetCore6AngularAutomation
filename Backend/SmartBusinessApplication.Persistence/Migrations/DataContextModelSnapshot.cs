// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBusinessApplication.Persistence.Data.Context;

#nullable disable

namespace SmartBusinessApplication.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SmartBusinessApplication.Domain.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AutoSystemEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ClientPasswordEncrypt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("InSideCurrentTemperature")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OutSideCurrentTemperature")
                        .HasColumnType("float");

                    b.Property<bool>("Role1")
                        .HasColumnType("bit");

                    b.Property<bool>("Role2")
                        .HasColumnType("bit");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double>("TemperatureLimit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoSystemEnabled = true,
                            ClientPasswordEncrypt = "Deneme",
                            ClientUserName = "Deneme",
                            CreatedDate = new DateTime(2023, 1, 9, 17, 8, 1, 476, DateTimeKind.Local).AddTicks(6632),
                            InSideCurrentTemperature = 20.5,
                            Name = "Deneme",
                            OutSideCurrentTemperature = 45.100000000000001,
                            Role1 = false,
                            Role2 = false,
                            State = false,
                            TemperatureLimit = 30.100000000000001,
                            UpdatedDate = new DateTime(2023, 1, 9, 17, 8, 1, 476, DateTimeKind.Local).AddTicks(6646)
                        },
                        new
                        {
                            Id = 2,
                            AutoSystemEnabled = true,
                            ClientPasswordEncrypt = "Deneme2",
                            ClientUserName = "Deneme2",
                            CreatedDate = new DateTime(2023, 1, 9, 17, 8, 1, 476, DateTimeKind.Local).AddTicks(6686),
                            InSideCurrentTemperature = 37.5,
                            Name = "Deneme2",
                            OutSideCurrentTemperature = 10.4,
                            Role1 = false,
                            Role2 = false,
                            State = false,
                            TemperatureLimit = 30.100000000000001,
                            UpdatedDate = new DateTime(2023, 1, 9, 17, 8, 1, 476, DateTimeKind.Local).AddTicks(6687)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
